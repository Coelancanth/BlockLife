#!/bin/bash
# Pre-push hook for BlockLife
# Enforces Sacred Sequence - prevents pushing stale branches
# Version: 1.0.0
# Created: 2025-08-20

# Color codes for pretty output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get current branch name
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Don't check main branch
if [ "$current_branch" = "main" ]; then
    exit 0
fi

echo -e "${BLUE}üîç Sacred Sequence Validation...${NC}"
echo "   Checking branch: $current_branch"

# Silently fetch to get latest main
git fetch origin main --quiet 2>/dev/null

# Check if we're behind origin/main
behind_count=$(git rev-list HEAD..origin/main --count 2>/dev/null || echo "0")

if [ "$behind_count" -gt "0" ]; then
    echo ""
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${RED}‚ùå SACRED SEQUENCE VIOLATION DETECTED${NC}"
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Your branch is $behind_count commits behind main.${NC}"
    echo ""
    echo "This usually happens when:"
    echo "  ‚Ä¢ Branch was created without fetching latest main"
    echo "  ‚Ä¢ Main has moved forward since branch creation"
    echo "  ‚Ä¢ The Sacred Sequence was not followed"
    echo ""
    echo -e "${GREEN}üìã To fix this issue:${NC}"
    echo ""
    echo "  1. Save any uncommitted work:"
    echo -e "     ${BLUE}git stash${NC}"
    echo ""
    echo "  2. Update your branch:"
    echo -e "     ${BLUE}git rebase origin/main${NC}"
    echo ""
    echo "  3. Restore your work (if you stashed):"
    echo -e "     ${BLUE}git stash pop${NC}"
    echo ""
    echo "  4. Try pushing again:"
    echo -e "     ${BLUE}git push${NC}"
    echo ""
    echo -e "${GREEN}üí° Pro tip: Use 'git syncmain' to automatically sync${NC}"
    echo ""
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${RED}Push blocked to prevent PR conflicts${NC}"
    echo -e "${RED}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    exit 1
fi

# Check if this is a new branch (no upstream)
upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)

if [ -z "$upstream" ]; then
    # New branch being pushed for first time
    echo -e "   ${GREEN}‚úì${NC} New branch, checking freshness..."
    
    # For new branches, just warn if they're old (don't block)
    # This allows for legitimate cases where you want to push an older branch
    merge_base=$(git merge-base HEAD origin/main)
    latest_main=$(git rev-parse origin/main)
    
    if [ "$merge_base" != "$latest_main" ]; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Note: This branch is based on an older version of main${NC}"
        echo "   Consider using 'git syncmain' to update if needed"
        echo ""
    else
        echo -e "   ${GREEN}‚úì${NC} Branch is based on latest main"
    fi
else
    echo -e "   ${GREEN}‚úì${NC} Branch is up to date with main"
fi

echo -e "${GREEN}‚úÖ Sacred Sequence validated - push allowed${NC}"
echo ""
exit 0