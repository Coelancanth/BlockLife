#!/bin/bash
# Pre-push hook: Ensures branches are rebased on latest main before pushing
# This prevents merge conflicts and duplicate work from stale branches

BRANCH=$(git rev-parse --abbrev-ref HEAD)
REMOTE="$1"
URL="$2"

# Block direct pushes to main
if [ "$BRANCH" = "main" ]; then
    echo "‚ùå ERROR: Direct push to main branch is not allowed!"
    echo "üìù Please create a feature branch:"
    echo "   git checkout -b feat/your-feature-name"
    echo "   git push -u origin feat/your-feature-name"
    exit 1
fi

echo "üîç Checking if branch is up to date with main..."

# Fetch latest main from origin (don't update local main)
git fetch origin main --quiet 2>/dev/null

# Check if current branch contains all commits from origin/main
BEHIND_MAIN=$(git rev-list --count HEAD..origin/main 2>/dev/null)

if [ "$BEHIND_MAIN" -gt 0 ]; then
    echo ""
    echo "‚ùå ERROR: Your branch is $BEHIND_MAIN commit(s) behind origin/main"
    echo ""
    echo "üìù To fix this, run these commands:"
    echo "   git fetch origin"
    echo "   git rebase origin/main"
    echo ""
    echo "If you have conflicts during rebase:"
    echo "   1. Fix the conflicts in your editor"
    echo "   2. git add <fixed-files>"
    echo "   3. git rebase --continue"
    echo ""
    echo "‚ö†Ô∏è  This check prevents:"
    echo "   ‚Ä¢ Merge conflicts in PR"
    echo "   ‚Ä¢ Duplicate work (fixing already-fixed bugs)"
    echo "   ‚Ä¢ CI failures from outdated code"
    exit 1
fi

# Optional: Check for uncommitted changes (warning only)
if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  Warning: You have uncommitted changes"
    echo "   Consider committing or stashing them first"
    # Don't block, just warn
fi

echo "‚úÖ Branch is up to date with origin/main - push allowed"
echo ""