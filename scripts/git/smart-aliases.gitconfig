# Smart Git Aliases for BlockLife
# Enforces the Sacred Sequence automatically
# Version: 1.0.0
# Created: 2025-08-20

[alias]
    # ==============================================
    # PRIMARY ALIASES - Use these for all operations
    # ==============================================
    
    # Smart branch creation - ALWAYS fetches first
    # Usage: git newbranch feat/my-feature
    newbranch = "!f() { \
        echo 'üîÑ Enforcing Sacred Sequence...'; \
        echo '  1Ô∏è‚É£ Fetching latest from origin...'; \
        git fetch origin --quiet && echo '     ‚úì Fetch complete' || (echo '     ‚úó Fetch failed' && exit 1); \
        echo '  2Ô∏è‚É£ Updating main branch...'; \
        git checkout main --quiet 2>/dev/null && echo '     ‚úì Switched to main' || (echo '     ‚úó Failed to switch to main' && exit 1); \
        git pull origin main --quiet && echo '     ‚úì Main updated' || (echo '     ‚úó Pull failed' && exit 1); \
        echo '  3Ô∏è‚É£ Creating new branch...'; \
        git checkout -b \"$1\" && echo '     ‚úì Branch created: '$1; \
        echo ''; \
        echo '‚úÖ Sacred Sequence complete!'; \
        echo 'üìç You are on: '$1' (based on latest main)'; \
    }; f"
    
    # Short alias for the above
    nb = "!git newbranch"
    
    # Smart rebase - fetches and rebases safely
    # Usage: git syncmain
    syncmain = "!f() { \
        echo 'üîÑ Syncing with latest main...'; \
        current=$(git rev-parse --abbrev-ref HEAD); \
        if [ \"$current\" = \"main\" ]; then \
            echo '‚ùå Cannot sync while on main branch'; \
            echo '   Switch to a feature branch first'; \
            exit 1; \
        fi; \
        echo '  1Ô∏è‚É£ Fetching latest...'; \
        git fetch origin main --quiet && echo '     ‚úì Fetched' || exit 1; \
        behind=$(git rev-list HEAD..origin/main --count); \
        if [ \"$behind\" -eq 0 ]; then \
            echo '‚úÖ Already up to date with main!'; \
        else \
            echo \"  2Ô∏è‚É£ Branch is $behind commits behind main\"; \
            echo '  3Ô∏è‚É£ Rebasing onto origin/main...'; \
            git rebase origin/main && echo '‚úÖ Rebase complete!' || echo '‚ùå Rebase failed - resolve conflicts'; \
        fi; \
    }; f"
    
    # Check if current branch is fresh
    # Usage: git checkfresh
    checkfresh = "!f() { \
        echo 'üîç Checking branch freshness...'; \
        git fetch origin main --quiet; \
        behind=$(git rev-list HEAD..origin/main --count); \
        ahead=$(git rev-list origin/main..HEAD --count); \
        current=$(git rev-parse --abbrev-ref HEAD); \
        echo ''; \
        echo \"üìä Branch Status: $current\"; \
        echo \"   Behind main: $behind commits\"; \
        echo \"   Ahead of main: $ahead commits\"; \
        if [ \"$behind\" -gt 0 ]; then \
            echo ''; \
            echo '‚ö†Ô∏è  Branch needs update!'; \
            echo '   Run: git syncmain'; \
        else \
            echo ''; \
            echo '‚úÖ Branch is up to date!'; \
        fi; \
    }; f"
    
    # ==============================================
    # WORKFLOW ALIASES - Common operations
    # ==============================================
    
    # Start work on a new feature (combines multiple steps)
    # Usage: git startwork feat/my-feature
    startwork = "!f() { \
        if [ -z \"$1\" ]; then \
            echo '‚ùå Usage: git startwork <branch-name>'; \
            echo '   Example: git startwork feat/save-system'; \
            exit 1; \
        fi; \
        echo 'üöÄ Starting new work...'; \
        echo ''; \
        git newbranch \"$1\"; \
    }; f"
    
    # Finish work and push (with freshness check)
    # Usage: git finishwork "commit message"
    finishwork = "!f() { \
        if [ -z \"$1\" ]; then \
            echo '‚ùå Usage: git finishwork \"commit message\"'; \
            exit 1; \
        fi; \
        echo 'üèÅ Finishing work...'; \
        echo '  1Ô∏è‚É£ Checking freshness...'; \
        git fetch origin main --quiet; \
        behind=$(git rev-list HEAD..origin/main --count); \
        if [ \"$behind\" -gt 0 ]; then \
            echo \"     ‚ö†Ô∏è  Branch is $behind commits behind main\"; \
            echo '  2Ô∏è‚É£ Updating branch...'; \
            git rebase origin/main || (echo '‚ùå Rebase failed - fix conflicts first' && exit 1); \
        else \
            echo '     ‚úì Branch is fresh'; \
        fi; \
        echo '  3Ô∏è‚É£ Adding all changes...'; \
        git add -A && echo '     ‚úì Changes staged'; \
        echo '  4Ô∏è‚É£ Committing...'; \
        git commit -m \"$1\" && echo '     ‚úì Committed'; \
        echo '  5Ô∏è‚É£ Pushing to remote...'; \
        branch=$(git rev-parse --abbrev-ref HEAD); \
        git push -u origin \"$branch\" && echo '     ‚úì Pushed'; \
        echo ''; \
        echo '‚úÖ Work complete and pushed!'; \
        echo 'üìù Next: Create PR with gh pr create'; \
    }; f"
    
    # ==============================================
    # STATUS ALIASES - Information commands
    # ==============================================
    
    # Show Sacred Sequence status
    sacred = "!f() { \
        echo 'üìú Sacred Sequence Status'; \
        echo '========================'; \
        current=$(git rev-parse --abbrev-ref HEAD); \
        echo \"Current Branch: $current\"; \
        echo ''; \
        git fetch origin main --quiet; \
        behind=$(git rev-list HEAD..origin/main --count 2>/dev/null || echo 'N/A'); \
        ahead=$(git rev-list origin/main..HEAD --count 2>/dev/null || echo 'N/A'); \
        echo \"üìä Sync Status:\"; \
        if [ \"$behind\" != 'N/A' ]; then \
            if [ \"$behind\" -eq 0 ]; then \
                echo '   ‚úÖ Up to date with main'; \
            else \
                echo \"   ‚ö†Ô∏è  $behind commits behind main\"; \
                echo '   üí° Run: git syncmain'; \
            fi; \
            if [ \"$ahead\" -gt 0 ]; then \
                echo \"   üì§ $ahead commits ahead of main\"; \
            fi; \
        else \
            echo '   ‚ùì Unable to compare with main'; \
        fi; \
        echo ''; \
        echo 'üîß Available Smart Commands:'; \
        echo '   git newbranch <name>  - Create branch from fresh main'; \
        echo '   git syncmain          - Update current branch'; \
        echo '   git checkfresh        - Check if branch is current'; \
        echo '   git startwork <name>  - Begin new feature'; \
        echo '   git finishwork <msg>  - Complete and push work'; \
    }; f"
    
    # ==============================================
    # SAFETY ALIASES - Prevent common mistakes
    # ==============================================
    
    # Override dangerous checkout -b with safe version
    safe-checkout = "!f() { \
        if [ \"$1\" = '-b' ]; then \
            echo '‚ö†Ô∏è  SAFETY: Use \"git newbranch\" instead of \"git checkout -b\"'; \
            echo '   This ensures you start from latest main.'; \
            echo ''; \
            echo '   Run: git newbranch' \"$2\"; \
            echo ''; \
            echo '   (Override with: git checkout-unsafe -b if absolutely needed)'; \
            exit 1; \
        else \
            git checkout \"$@\"; \
        fi; \
    }; f"
    
    # Unsafe version if really needed
    checkout-unsafe = checkout