#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Read commit message
commit_msg=$(cat "$1")
commit_msg_first_line=$(echo "$commit_msg" | head -n 1)

# Define valid patterns
conventional_pattern='^(feat|fix|tech|docs|test|perf|build|ci|chore|refactor|style)(\([A-Za-z]{2,3}_[0-9]{3}\))?: .{1,72}$'
merge_pattern='^Merge '
revert_pattern='^Revert '
wip_pattern='^(WIP|wip):'

# Function to analyze commit message and provide specific feedback
analyze_commit_message() {
  local msg="$1"
  
  # Check for common issues
  if echo "$msg" | grep -qE '^[A-Z]'; then
    if ! echo "$msg" | grep -qE '^(Merge|Revert|WIP)'; then
      echo "  ‚ö†  Type should be lowercase (found: '$(echo "$msg" | cut -d: -f1)')"
    fi
  fi
  
  # Check if colon is missing
  if ! echo "$msg" | grep -q ':'; then
    echo "  ‚ö†  Missing colon after type/scope"
    echo "     Example: feat: add new feature"
    return
  fi
  
  # Extract type and check if valid
  local type=$(echo "$msg" | sed -n 's/^\([a-z]*\).*/\1/p')
  if [ -n "$type" ]; then
    if ! echo "$type" | grep -qE '^(feat|fix|tech|docs|test|perf|build|ci|chore|refactor|style)$'; then
      echo "  ‚ö†  Invalid type: '$type'"
      echo "     Valid types: feat, fix, tech, docs, test, perf, build, ci, chore, refactor, style"
    fi
  fi
  
  # Check scope format if present
  if echo "$msg" | grep -qE '^\w+\([^)]+\):'; then
    local scope=$(echo "$msg" | sed -n 's/^[a-z]*(\([^)]*\)).*/\1/p')
    if [ -n "$scope" ]; then
      if ! echo "$scope" | grep -qE '^[A-Za-z]{2,3}_[0-9]{3}$'; then
        echo "  ‚ö†  Invalid scope format: '($scope)'"
        echo "     Expected: Work item like VS_001, TD_042, BR_012"
        echo "     Or omit scope entirely for general changes"
      fi
    fi
  fi
  
  # Check description length
  local desc_with_type=$(echo "$msg" | cut -d' ' -f1)
  local full_length=${#msg}
  if [ $full_length -gt 72 ]; then
    echo "  ‚ö†  Message too long: $full_length characters (max: 72)"
    echo "     Consider shortening the description"
  fi
  
  # Check for missing space after colon
  if echo "$msg" | grep -qE ':[^ ]'; then
    echo "  ‚ö†  Missing space after colon"
    echo "     Should be: 'type: description' not 'type:description'"
  fi
  
  # Check for empty description
  if echo "$msg" | grep -qE ': *$'; then
    echo "  ‚ö†  Empty description"
    echo "     Add a meaningful description after the colon"
  fi
}

# Check message format
if echo "$commit_msg" | grep -qE "$merge_pattern|$revert_pattern"; then
  # Allow merge and revert commits
  echo "‚úÖ Merge/Revert commit detected - allowed"
  exit 0
elif echo "$commit_msg" | grep -qE "$wip_pattern"; then
  # Allow WIP commits for local development
  echo "‚ö†Ô∏è  WIP commit detected - remember to squash before merging"
  exit 0
elif echo "$commit_msg_first_line" | grep -qE "$conventional_pattern"; then
  echo "‚úÖ Commit message validated"
  
  # Additional helpful validation
  type=$(echo "$commit_msg_first_line" | cut -d'(' -f1 | cut -d':' -f1)
  
  # Provide helpful context based on type
  case "$type" in
    feat)
      echo "   ‚ÑπÔ∏è  Feature commit - adding new functionality"
      ;;
    fix)
      echo "   ‚ÑπÔ∏è  Bug fix - resolving an issue"
      ;;
    refactor)
      echo "   ‚ÑπÔ∏è  Refactoring - improving code without changing behavior"
      ;;
    tech)
      echo "   ‚ÑπÔ∏è  Technical improvement - architecture, performance, tooling"
      ;;
    docs)
      echo "   ‚ÑπÔ∏è  Documentation update"
      ;;
    test)
      echo "   ‚ÑπÔ∏è  Test addition or modification"
      ;;
    build)
      echo "   ‚ÑπÔ∏è  Build system or dependency change"
      ;;
    ci)
      echo "   ‚ÑπÔ∏è  CI/CD configuration change"
      ;;
    chore)
      echo "   ‚ÑπÔ∏è  Maintenance task"
      ;;
    style)
      echo "   ‚ÑπÔ∏è  Code style/formatting change"
      ;;
  esac
  
  exit 0
else
  echo "‚ùå Invalid commit message format!"
  echo ""
  echo "Expected format: <type>(<scope>): <description>"
  echo "Or:              <type>: <description>"
  echo ""
  echo "Valid types:"
  echo "  ‚Ä¢ feat     - New feature or functionality"
  echo "  ‚Ä¢ fix      - Bug fix or issue resolution"
  echo "  ‚Ä¢ refactor - Code improvement without behavior change"
  echo "  ‚Ä¢ tech     - Technical improvements (architecture, tools)"
  echo "  ‚Ä¢ docs     - Documentation changes only"
  echo "  ‚Ä¢ test     - Adding or updating tests"
  echo "  ‚Ä¢ perf     - Performance improvements"
  echo "  ‚Ä¢ build    - Build system or dependency changes"
  echo "  ‚Ä¢ ci       - CI/CD configuration changes"
  echo "  ‚Ä¢ chore    - Maintenance tasks, no code change"
  echo "  ‚Ä¢ style    - Code style/formatting (no logic change)"
  echo ""
  echo "Valid scopes (optional):"
  echo "  ‚Ä¢ Work items: VS_001, TD_042, BR_012"
  echo "  ‚Ä¢ Can be omitted for general changes"
  echo ""
  echo "Examples:"
  echo "  feat(VS_003): add save system"
  echo "  fix(BR_012): resolve race condition in block spawner"
  echo "  refactor: reorganize script directory structure"
  echo "  tech(TD_042): consolidate duplicate archive logic"
  echo "  docs: update README with build instructions"
  echo ""
  echo "Your message: $commit_msg_first_line"
  echo ""
  echo "Detailed analysis:"
  analyze_commit_message "$commit_msg_first_line"
  echo ""
  echo "üí° Tips:"
  echo "  ‚Ä¢ Keep the first line under 72 characters"
  echo "  ‚Ä¢ Use imperative mood ('add' not 'added')"
  echo "  ‚Ä¢ Capitalize the description after type"
  echo "  ‚Ä¢ Reference work items when applicable"
  echo "  ‚Ä¢ Use 'refactor' for code reorganization"
  echo ""
  exit 1
fi