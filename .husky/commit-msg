#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Read commit message
commit_msg=$(cat "$1")
commit_msg_first_line=$(echo "$commit_msg" | head -n 1)

# Define valid patterns
conventional_pattern='^(feat|fix|tech|docs|test|perf|build|ci|chore|refactor|style)(\([A-Za-z]{2,3}_[0-9]{3}\))?: .{1,72}$'
merge_pattern='^Merge '
revert_pattern='^Revert '
wip_pattern='^(WIP|wip):'

# Color codes for better visibility
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to analyze commit message and provide specific feedback
analyze_commit_message() {
  local msg="$1"
  
  # Check for common issues
  if echo "$msg" | grep -qE '^[A-Z]'; then
    if ! echo "$msg" | grep -qE '^(Merge|Revert|WIP)'; then
      echo "  ${YELLOW}‚ö†  Type should be lowercase (found: '$(echo "$msg" | cut -d: -f1)')${NC}"
    fi
  fi
  
  # Check if colon is missing
  if ! echo "$msg" | grep -q ':'; then
    echo "  ${YELLOW}‚ö†  Missing colon after type/scope${NC}"
    echo "  ${BLUE}   Example: feat: add new feature${NC}"
    return
  fi
  
  # Extract type and check if valid
  local type=$(echo "$msg" | sed -n 's/^\([a-z]*\).*/\1/p')
  if [ -n "$type" ]; then
    if ! echo "$type" | grep -qE '^(feat|fix|tech|docs|test|perf|build|ci|chore|refactor|style)$'; then
      echo "  ${YELLOW}‚ö†  Invalid type: '$type'${NC}"
      echo "  ${BLUE}   Valid types: feat, fix, tech, docs, test, perf, build, ci, chore, refactor, style${NC}"
    fi
  fi
  
  # Check scope format if present
  if echo "$msg" | grep -qE '^\w+\([^)]+\):'; then
    local scope=$(echo "$msg" | sed -n 's/^[a-z]*(\([^)]*\)).*/\1/p')
    if [ -n "$scope" ]; then
      if ! echo "$scope" | grep -qE '^[A-Za-z]{2,3}_[0-9]{3}$'; then
        echo "  ${YELLOW}‚ö†  Invalid scope format: '($scope)'${NC}"
        echo "  ${BLUE}   Expected: Work item like VS_001, TD_042, BR_012${NC}"
        echo "  ${BLUE}   Or omit scope entirely for general changes${NC}"
      fi
    fi
  fi
  
  # Check description length
  local desc_with_type=$(echo "$msg" | cut -d' ' -f1)
  local full_length=${#msg}
  if [ $full_length -gt 72 ]; then
    echo "  ${YELLOW}‚ö†  Message too long: $full_length characters (max: 72)${NC}"
    echo "  ${BLUE}   Consider shortening the description${NC}"
  fi
  
  # Check for missing space after colon
  if echo "$msg" | grep -qE ':[^ ]'; then
    echo "  ${YELLOW}‚ö†  Missing space after colon${NC}"
    echo "  ${BLUE}   Should be: 'type: description' not 'type:description'${NC}"
  fi
  
  # Check for empty description
  if echo "$msg" | grep -qE ': *$'; then
    echo "  ${YELLOW}‚ö†  Empty description${NC}"
    echo "  ${BLUE}   Add a meaningful description after the colon${NC}"
  fi
}

# Check message format
if echo "$commit_msg" | grep -qE "$merge_pattern|$revert_pattern"; then
  # Allow merge and revert commits
  echo "${GREEN}‚úÖ Merge/Revert commit detected - allowed${NC}"
  exit 0
elif echo "$commit_msg" | grep -qE "$wip_pattern"; then
  # Allow WIP commits for local development
  echo "${YELLOW}‚ö†Ô∏è  WIP commit detected - remember to squash before merging${NC}"
  exit 0
elif echo "$commit_msg_first_line" | grep -qE "$conventional_pattern"; then
  echo "${GREEN}‚úÖ Commit message validated${NC}"
  
  # Additional helpful validation
  type=$(echo "$commit_msg_first_line" | cut -d'(' -f1 | cut -d':' -f1)
  
  # Provide helpful context based on type
  case "$type" in
    feat)
      echo "  ${BLUE}‚ÑπÔ∏è  Feature commit - adding new functionality${NC}"
      ;;
    fix)
      echo "  ${BLUE}‚ÑπÔ∏è  Bug fix - resolving an issue${NC}"
      ;;
    refactor)
      echo "  ${BLUE}‚ÑπÔ∏è  Refactoring - improving code without changing behavior${NC}"
      ;;
    tech)
      echo "  ${BLUE}‚ÑπÔ∏è  Technical improvement - architecture, performance, tooling${NC}"
      ;;
    docs)
      echo "  ${BLUE}‚ÑπÔ∏è  Documentation update${NC}"
      ;;
  esac
  
  exit 0
else
  echo "${RED}‚ùå Invalid commit message format!${NC}"
  echo ""
  echo "${YELLOW}Expected format:${NC} <type>(<scope>): <description>"
  echo "${YELLOW}Or:${NC}              <type>: <description>"
  echo ""
  echo "${GREEN}Valid types:${NC}"
  echo "  ‚Ä¢ feat     - New feature or functionality"
  echo "  ‚Ä¢ fix      - Bug fix or issue resolution"
  echo "  ‚Ä¢ refactor - Code improvement without behavior change"
  echo "  ‚Ä¢ tech     - Technical improvements (architecture, tools)"
  echo "  ‚Ä¢ docs     - Documentation changes only"
  echo "  ‚Ä¢ test     - Adding or updating tests"
  echo "  ‚Ä¢ perf     - Performance improvements"
  echo "  ‚Ä¢ build    - Build system or dependency changes"
  echo "  ‚Ä¢ ci       - CI/CD configuration changes"
  echo "  ‚Ä¢ chore    - Maintenance tasks, no code change"
  echo "  ‚Ä¢ style    - Code style/formatting (no logic change)"
  echo ""
  echo "${GREEN}Valid scopes (optional):${NC}"
  echo "  ‚Ä¢ Work items: VS_001, TD_042, BR_012"
  echo "  ‚Ä¢ Can be omitted for general changes"
  echo ""
  echo "${GREEN}Examples:${NC}"
  echo "  ${BLUE}feat(VS_003): add save system${NC}"
  echo "  ${BLUE}fix(BR_012): resolve race condition in block spawner${NC}"
  echo "  ${BLUE}refactor: reorganize script directory structure${NC}"
  echo "  ${BLUE}tech(TD_042): consolidate duplicate archive logic${NC}"
  echo "  ${BLUE}docs: update README with build instructions${NC}"
  echo ""
  echo "${YELLOW}Your message:${NC} $commit_msg_first_line"
  echo ""
  echo "${YELLOW}Detailed analysis:${NC}"
  analyze_commit_message "$commit_msg_first_line"
  echo ""
  echo "${BLUE}üí° Tips:${NC}"
  echo "  ‚Ä¢ Keep the first line under 72 characters"
  echo "  ‚Ä¢ Use imperative mood ('add' not 'added')"
  echo "  ‚Ä¢ Capitalize the description after type"
  echo "  ‚Ä¢ Reference work items when applicable"
  echo "  ‚Ä¢ Use 'refactor' for code reorganization"
  echo ""
  exit 1
fi