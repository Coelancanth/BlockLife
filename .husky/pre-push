#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Get current branch
current_branch=$(git rev-parse --abbrev-ref HEAD)

# BLOCK direct pushes to main branch (TD_057)
if [ "$current_branch" = "main" ]; then
  echo ""
  echo "🚨 BLOCKED: Direct push to main branch not allowed"
  echo ""
  echo "   Required workflow:"
  echo "   1. Create feature branch: git checkout -b feat/your-feature"
  echo "   2. Push feature branch: git push -u origin feat/your-feature"
  echo "   3. Create PR: gh pr create --title \"your title\""
  echo ""
  echo "   Emergency override: git push --no-verify"
  echo "   (Use override only for critical hotfixes)"
  echo ""
  echo "   Current branch: $current_branch"
  echo "   Protocol: All changes require PR review"
  echo ""
  exit 1
fi

# Smart build - only if files changed
echo "🔍 Checking for code changes..."
# Robust check that handles missing origin/main
if git rev-parse --verify origin/main >/dev/null 2>&1; then
  changed_files=$(git diff --name-only origin/main...HEAD 2>/dev/null | grep -E '\.(cs|csproj|sln)$' | head -1)
else
  # Fallback: check recent commits if origin/main doesn't exist
  changed_files=$(git diff --name-only HEAD~3...HEAD 2>/dev/null | grep -E '\.(cs|csproj|sln)$' | head -1)
fi

if [ -n "$changed_files" ]; then
  echo "🔨 Building solution (code changes detected)..."
  dotnet build BlockLife.sln --nologo --verbosity quiet
  
  if [ $? -ne 0 ]; then
    echo "❌ Build failed!"
    echo "   Fix build errors before pushing"
    echo "   To see details: dotnet build"
    exit 1
  fi
  
  echo "🔍 Running comprehensive static analysis..."
  # Build already enforces code style (EnforceCodeStyleInBuild=true + TreatWarningsAsErrors=true)
  # Adding extra analyzer checks for deeper quality validation
  dotnet format analyzers BlockLife.sln --verify-no-changes --verbosity quiet
  if [ $? -ne 0 ]; then
    echo "❌ Advanced code analysis issues found!"
    echo "   Fix with: dotnet format analyzers BlockLife.sln"
    echo "   To bypass: git push --no-verify" 
    exit 1
  fi
  
  echo "🧪 Running fast unit tests..."
  # Run only fast unit tests with timeout to prevent hanging
  timeout 30s dotnet test BlockLife.sln --no-build \
    --filter "Category!=Integration&Category!=Performance" \
    --verbosity quiet --logger "console;verbosity=minimal"
  
  if [ $? -ne 0 ]; then
    echo "❌ Unit tests failed!"
    echo "   To see details: dotnet test"
    echo "   To bypass: git push --no-verify"
    exit 1
  fi
else
  echo "📝 No code changes detected - skipping build/test"
fi

# Check if branch is stale - non-interactive warnings only
echo "🔄 Checking branch freshness..."
if git fetch origin main --quiet 2>/dev/null; then
  behind_count=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")
  
  if [ "$behind_count" -gt 20 ]; then
    echo ""
    echo "⚠️  WARNING: Branch is $behind_count commits behind main"
    echo "   Consider rebasing before push: git rebase origin/main"
    echo "   Or use: git push --no-verify to skip this check"
  elif [ "$behind_count" -gt 5 ]; then
    echo "ℹ️  Branch is $behind_count commits behind main (consider updating)"
  fi
else
  echo "⚠️  Could not fetch origin/main - check network connection"
fi

# Memory Bank context reminder (TD_053) - integrated into Husky hook
if [ "$current_branch" != "main" ] && [ -n "$changed_files" ]; then
  echo ""
  echo "────────────────────────────────────────────────────────"
  echo "💡 CONTEXT REMINDER: Consider updating activeContext.md"
  echo ""
  echo "  If this work is significant, update:"
  echo "  .claude/memory-bank/activeContext.md"
  echo "────────────────────────────────────────────────────────"
fi

echo "✅ All checks passed - ready to push!"