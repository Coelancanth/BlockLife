name: Main Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'Docs/**'
      - '*.md'
      - '.github/**'
  workflow_dispatch: # Allow manual triggering

env:
  DOTNET_VERSION: '8.0.x'
  GODOT_VERSION: '4.4.1'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Comprehensive testing on main branch
  full-test-suite:
    name: 🧪 Full Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔄 Restore dependencies
      run: dotnet restore BlockLife.sln

    - name: 🏗️ Architecture Tests
      run: |
        dotnet test tests/BlockLife.Core.Tests.csproj \
          --filter "FullyQualifiedName~Architecture" \
          --no-restore \
          --verbosity normal

    - name: 🧪 Unit Tests
      run: |
        dotnet test tests/BlockLife.Core.Tests.csproj \
          --filter "Category=Unit|Category!=Integration" \
          --no-restore \
          --verbosity normal \
          --logger "trx;LogFileName=unit-test-results.trx"

    - name: 🔬 Property-Based Tests
      run: |
        dotnet test tests/BlockLife.Core.Tests.csproj \
          --filter "FullyQualifiedName~PropertyTests" \
          --no-restore \
          --verbosity normal

    - name: 🏃 Performance Tests
      run: |
        dotnet test tests/BlockLife.Core.Tests.csproj \
          --filter "FullyQualifiedName~Performance" \
          --no-restore \
          --verbosity normal \
          --logger "console;verbosity=detailed"

    - name: 📊 Generate Code Coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet test tests/BlockLife.Core.Tests.csproj \
          --no-restore \
          --verbosity minimal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          **/*.trx
          **/TestResults/*.trx

    - name: 📤 Upload Coverage
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: code-coverage
        path: coverage/**/coverage.cobertura.xml

  # Build and package for release
  build-artifacts:
    name: 📦 Build Artifacts
    needs: full-test-suite
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🎮 Setup Godot
      uses: chickensoft-games/setup-godot@v2
      with:
        version: ${{ env.GODOT_VERSION }}

    - name: 🔄 Restore dependencies
      run: dotnet restore BlockLife.sln

    - name: 🏗️ Build Core Library
      run: |
        dotnet build src/BlockLife.Core.csproj \
          --configuration Release \
          --no-restore \
          /p:Version=${{ github.run_number }}

    - name: 🎮 Build Godot Project
      run: |
        dotnet build godot_project/BlockLife.csproj \
          --configuration Release \
          --no-restore

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          src/bin/Release/**
          godot_project/bin/Release/**

  # Create release on version tags
  create-release:
    name: 🚀 Create Release
    needs: build-artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: 📦 Package Release
      run: |
        cd artifacts
        zip -r ../BlockLife-${{ github.ref_name }}.zip .
        cd ..

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: BlockLife-*.zip
        generate_release_notes: true
        body: |
          ## BlockLife ${{ github.ref_name }}
          
          ### What's Changed
          See auto-generated release notes below.
          
          ### Installation
          1. Download the zip file
          2. Extract to your Godot projects folder
          3. Open with Godot 4.4.1+
          
          Built by CI pipeline run #${{ github.run_number }}

  # Summary job for branch protection
  ci-success:
    name: ✅ CI Success
    needs: [full-test-suite, build-artifacts]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎯 Check all jobs
      uses: actions/github-script@v7
      with:
        script: |
          const needs = ${{ toJson(needs) }};
          const failed = Object.entries(needs).filter(([job, data]) => 
            data.result !== 'success' && data.result !== 'skipped'
          );
          
          if (failed.length > 0) {
            core.setFailed(`Failed jobs: ${failed.map(f => f[0]).join(', ')}`);
          } else {
            console.log('✅ All CI checks passed!');
          }