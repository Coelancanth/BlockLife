name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick sanity check - fail fast on obvious issues
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - name: Checkout (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Validate Critical Files
      run: |
        echo "üîç Checking critical files exist..."
        test -f BlockLife.sln || exit 1
        test -f src/BlockLife.Core.csproj || exit 1
        test -d tests || exit 1
        echo "‚úÖ Repository structure valid"
        
    - name: Check for Merge Conflicts
      run: |
        if grep -r "^<<<<<<< " --include="*.cs" --include="*.csproj" .; then
          echo "‚ùå Merge conflict markers found!"
          exit 1
        fi
        echo "‚úÖ No merge conflicts"

  branch-freshness:
    name: Check Branch Freshness
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to compare
        
    - name: Check if PR is stale
      run: |
        echo "üîç Checking branch freshness..."
        
        # Get the base branch (usually main)
        BASE_BRANCH=${{ github.base_ref }}
        
        # Fetch latest base branch
        git fetch origin $BASE_BRANCH
        
        # Count commits behind
        BEHIND=$(git rev-list --count HEAD..origin/$BASE_BRANCH)
        
        echo "üìä Branch is $BEHIND commits behind $BASE_BRANCH"
        
        if [ "$BEHIND" -gt 20 ]; then
          echo "::error::Branch is too far behind $BASE_BRANCH ($BEHIND commits). Please rebase your branch."
          echo "## ‚ùå Branch Too Stale" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This branch is **$BEHIND commits** behind \`$BASE_BRANCH\`." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please run:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "git fetch origin" >> $GITHUB_STEP_SUMMARY
          echo "git rebase origin/$BASE_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [ "$BEHIND" -gt 10 ]; then
          echo "::warning::Branch is $BEHIND commits behind $BASE_BRANCH. Consider rebasing soon."
          echo "## ‚ö†Ô∏è Branch Getting Stale" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This branch is **$BEHIND commits** behind \`$BASE_BRANCH\`." >> $GITHUB_STEP_SUMMARY
          echo "Consider rebasing to avoid future conflicts." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ Branch is reasonably up-to-date"
          echo "## ‚úÖ Branch Freshness OK" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch is $BEHIND commits behind \`$BASE_BRANCH\`." >> $GITHUB_STEP_SUMMARY
        fi

  build-and-test:
    name: Build & Test
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always() && (needs.quick-check.result == 'success')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin
          **/obj
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
        
    - name: Restore
      run: dotnet restore BlockLife.sln --locked-mode
      
    - name: Build
      run: dotnet build BlockLife.sln --no-restore --configuration Debug
      
    - name: Quick Architecture Tests (Fail Fast)
      run: |
        echo "‚ö° Running Architecture Tests First (fail fast)..."
        echo "These tests validate namespace boundaries, DI rules, and core architecture."
        echo ""
        
        # Run only Architecture category tests for fast feedback
        dotnet test BlockLife.sln \
          --no-build \
          --configuration Debug \
          --filter "Category=Architecture" \
          --logger "console;verbosity=minimal" \
          --logger "trx;LogFileName=architecture-test-results.trx"
        
        # If architecture tests fail, we stop here (1.3s feedback)
        if [ $? -ne 0 ]; then
          echo "‚ùå Architecture violations detected - stopping pipeline early"
          echo "## ‚ùå Architecture Tests Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Architecture violations must be fixed before running full test suite." >> $GITHUB_STEP_SUMMARY
          echo "This fail-fast approach saves ~38 seconds of CI time." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "‚úÖ Architecture tests passed - proceeding to full test suite"
      
    - name: Full Test Suite
      run: |
        # Now run the full test suite (excluding already-run Architecture tests for efficiency)
        echo "üß™ Running full test suite..."
        dotnet test BlockLife.sln \
          --no-build \
          --configuration Debug \
          --logger "console;verbosity=minimal" \
          --logger "trx;LogFileName=test-results.trx" \
          --filter "Category!=Performance&Category!=Architecture"
        
        # Note: Removed || true - tests MUST pass for CI to succeed
        # If tests fail on Linux but pass on Windows, we need to fix the tests, not hide failures
        # BR_008 RESOLVED: SimulationManagerThreadSafetyTests fixed with environment-aware thresholds
          
    - name: Handle Test Failures
      if: failure()
      run: |
        echo "‚ùå Tests failed! Checking for common issues..." 
        echo "## ‚ùå Test Failure Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if it's a platform-specific issue
        if grep -q "System.PlatformNotSupportedException" **/test-results.trx 2>/dev/null; then
          echo "‚ö†Ô∏è Platform-specific test failures detected (Linux vs Windows)" >> $GITHUB_STEP_SUMMARY
          echo "Consider marking these tests with [Trait(\"Platform\", \"Windows\")]" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for missing dependencies
        if grep -q "Could not load file or assembly" **/test-results.trx 2>/dev/null; then
          echo "‚ö†Ô∏è Missing dependencies detected" >> $GITHUB_STEP_SUMMARY
          echo "Run 'dotnet restore' locally to verify all packages" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Fail the job explicitly
        exit 1
        
    - name: Generate Test Report
      if: always()
      run: |
        echo "## üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "**/test-results.trx" ]; then
          echo "‚úÖ Tests completed - see artifacts for details" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è No test results generated" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/test-results.trx
          **/architecture-test-results.trx
        retention-days: 7
        
  code-quality:
    name: Code Quality
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Install dotnet-format
      run: dotnet tool install -g dotnet-format || dotnet tool update -g dotnet-format
        
    - name: Check Format
      run: |
        echo "üé® Checking code formatting..."
        dotnet format BlockLife.sln --verify-no-changes --verbosity normal || {
          echo "::warning::Code formatting issues found. Run 'dotnet format' locally."
          echo "## ‚ö†Ô∏è Formatting Issues" >> $GITHUB_STEP_SUMMARY
          echo "Run \`dotnet format BlockLife.sln\` to fix formatting" >> $GITHUB_STEP_SUMMARY
        }
        
    - name: Analyze Code Metrics
      run: |
        echo "## üìè Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count lines of code
        echo "### Lines of Code" >> $GITHUB_STEP_SUMMARY
        echo "- C# Source: $(find src -name '*.cs' | xargs wc -l | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: $(find tests -name '*.cs' | xargs wc -l | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        
        # Count test files
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Test Files: $(find tests -name '*Tests.cs' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Source Files: $(find src -name '*.cs' | wc -l)" >> $GITHUB_STEP_SUMMARY
        
    - name: Check for Common Issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for TODO comments
        TODO_COUNT=$(grep -r "TODO" --include="*.cs" . | wc -l || echo 0)
        if [ "$TODO_COUNT" -gt 0 ]; then
          echo "::notice::Found $TODO_COUNT TODO comments in code"
        fi
        
        # Check for Console.WriteLine (should use logging)
        CONSOLE_COUNT=$(grep -r "Console.WriteLine" --include="*.cs" src/ | wc -l || echo 0)
        if [ "$CONSOLE_COUNT" -gt 0 ]; then
          echo "::warning::Found $CONSOLE_COUNT Console.WriteLine calls - consider using ILogger"
        fi
        
  # Final status check for branch protection
  ci-status:
    name: CI Status
    needs: [build-and-test, code-quality, branch-freshness]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    
    steps:
    - name: Check Status
      run: |
        echo "üîç Checking CI job results..."
        echo "Build & Test: ${{ needs.build-and-test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Branch Freshness: ${{ needs.branch-freshness.result }}"
        echo "Event: ${{ github.event_name }}"
        
        # Build & Test is always required
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "‚ùå Build & Test failed or was skipped"
          exit 1
        fi
        
        # Code Quality and Branch Freshness only required for PRs
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "‚ùå Code Quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.branch-freshness.result }}" != "success" ] && [ "${{ needs.branch-freshness.result }}" != "skipped" ]; then
            echo "‚ùå Branch freshness check failed"
            exit 1
          fi
        fi
        
        echo "‚úÖ All CI checks passed!"
        
        echo "## ‚úÖ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All required checks have passed:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Build successful" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Architecture tests passed (fail-fast)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Full test suite passed" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "- ‚úÖ Code quality validated" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚ö° TD_079: Staged test execution provides 1.3s fail-fast feedback on architecture violations" >> $GITHUB_STEP_SUMMARY