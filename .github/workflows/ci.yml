name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick sanity check - fail fast on obvious issues
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - name: Checkout (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Validate Critical Files
      run: |
        echo "üîç Checking critical files exist..."
        test -f BlockLife.sln || exit 1
        test -f src/BlockLife.Core.csproj || exit 1
        test -d tests || exit 1
        echo "‚úÖ Repository structure valid"
        
    - name: Check for Merge Conflicts
      run: |
        if grep -r "^<<<<<<< " --include="*.cs" --include="*.csproj" .; then
          echo "‚ùå Merge conflict markers found!"
          exit 1
        fi
        echo "‚úÖ No merge conflicts"

  build-and-test:
    name: Build & Test
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          **/bin
          **/obj
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
        
    - name: Restore
      run: dotnet restore BlockLife.sln --locked-mode
      
    - name: Build
      run: dotnet build BlockLife.sln --no-restore --configuration Debug
      
    - name: Test (Unit & Integration)
      run: |
        dotnet test BlockLife.sln \
          --no-build \
          --configuration Debug \
          --logger "console;verbosity=minimal" \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "html;LogFileName=test-results.html" \
          --collect:"XPlat Code Coverage" \
          --filter "Category!=Performance" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./coverage/
          
    - name: Generate Test Report
      if: always()
      run: |
        echo "## üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "**/test-results.trx" ]; then
          echo "‚úÖ Tests completed - see artifacts for details" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è No test results generated" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/test-results.trx
          **/test-results.html
          **/coverage/
        retention-days: 7
        
    - name: Code Coverage Report
      if: github.event_name == 'pull_request'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: '**/coverage.cobertura.xml'
        badge: true
        format: markdown
        output: both
        
  code-quality:
    name: Code Quality
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Install dotnet-format
      run: dotnet tool install -g dotnet-format || dotnet tool update -g dotnet-format
        
    - name: Check Format
      run: |
        echo "üé® Checking code formatting..."
        dotnet format BlockLife.sln --verify-no-changes --verbosity normal || {
          echo "::warning::Code formatting issues found. Run 'dotnet format' locally."
          echo "## ‚ö†Ô∏è Formatting Issues" >> $GITHUB_STEP_SUMMARY
          echo "Run \`dotnet format BlockLife.sln\` to fix formatting" >> $GITHUB_STEP_SUMMARY
        }
        
    - name: Analyze Code Metrics
      run: |
        echo "## üìè Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count lines of code
        echo "### Lines of Code" >> $GITHUB_STEP_SUMMARY
        echo "- C# Source: $(find src -name '*.cs' | xargs wc -l | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: $(find tests -name '*.cs' | xargs wc -l | tail -1 | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
        
        # Count test files
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Test Files: $(find tests -name '*Tests.cs' | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Source Files: $(find src -name '*.cs' | wc -l)" >> $GITHUB_STEP_SUMMARY
        
    - name: Check for Common Issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for TODO comments
        TODO_COUNT=$(grep -r "TODO" --include="*.cs" . | wc -l || echo 0)
        if [ "$TODO_COUNT" -gt 0 ]; then
          echo "::notice::Found $TODO_COUNT TODO comments in code"
        fi
        
        # Check for Console.WriteLine (should use logging)
        CONSOLE_COUNT=$(grep -r "Console.WriteLine" --include="*.cs" src/ | wc -l || echo 0)
        if [ "$CONSOLE_COUNT" -gt 0 ]; then
          echo "::warning::Found $CONSOLE_COUNT Console.WriteLine calls - consider using ILogger"
        fi
        
  # Final status check for branch protection
  ci-status:
    name: CI Status
    needs: [build-and-test, code-quality]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    
    steps:
    - name: Check Status
      run: |
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "‚ùå Build & Test failed"
          exit 1
        fi
        
        if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "‚ùå Code Quality checks failed"
          exit 1
        fi
        
        echo "‚úÖ All CI checks passed!"
        
        echo "## ‚úÖ CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All required checks have passed:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Build successful" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Tests passing" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "- ‚úÖ Code quality validated" >> $GITHUB_STEP_SUMMARY
        fi